// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ankur22/medium-picker/internal/rest (interfaces: UserStore,MediumSourceStore)

// Package rest is a generated GoMock package.
package rest

import (
	context "context"
	store "github.com/ankur22/medium-picker/internal/store"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserStore is a mock of UserStore interface
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// CreateNewUser mocks base method
func (m *MockUserStore) CreateNewUser(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUser indicates an expected call of CreateNewUser
func (mr *MockUserStoreMockRecorder) CreateNewUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockUserStore)(nil).CreateNewUser), arg0, arg1)
}

// GetUser mocks base method
func (m *MockUserStore) GetUser(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUserStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserStore)(nil).GetUser), arg0, arg1)
}

// IsUser mocks base method
func (m *MockUserStore) IsUser(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUser", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUser indicates an expected call of IsUser
func (mr *MockUserStoreMockRecorder) IsUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUser", reflect.TypeOf((*MockUserStore)(nil).IsUser), arg0, arg1)
}

// MockMediumSourceStore is a mock of MediumSourceStore interface
type MockMediumSourceStore struct {
	ctrl     *gomock.Controller
	recorder *MockMediumSourceStoreMockRecorder
}

// MockMediumSourceStoreMockRecorder is the mock recorder for MockMediumSourceStore
type MockMediumSourceStoreMockRecorder struct {
	mock *MockMediumSourceStore
}

// NewMockMediumSourceStore creates a new mock instance
func NewMockMediumSourceStore(ctrl *gomock.Controller) *MockMediumSourceStore {
	mock := &MockMediumSourceStore{ctrl: ctrl}
	mock.recorder = &MockMediumSourceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMediumSourceStore) EXPECT() *MockMediumSourceStoreMockRecorder {
	return m.recorder
}

// AddSource mocks base method
func (m *MockMediumSourceStore) AddSource(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSource", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSource indicates an expected call of AddSource
func (mr *MockMediumSourceStoreMockRecorder) AddSource(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSource", reflect.TypeOf((*MockMediumSourceStore)(nil).AddSource), arg0, arg1, arg2)
}

// GetSources mocks base method
func (m *MockMediumSourceStore) GetSources(arg0 context.Context, arg1 string, arg2 int) ([]store.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSources", arg0, arg1, arg2)
	ret0, _ := ret[0].([]store.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSources indicates an expected call of GetSources
func (mr *MockMediumSourceStoreMockRecorder) GetSources(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSources", reflect.TypeOf((*MockMediumSourceStore)(nil).GetSources), arg0, arg1, arg2)
}
