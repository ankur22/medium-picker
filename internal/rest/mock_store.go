// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ankur22/medium-picker/internal/rest (interfaces: UserStorer,MediumSourceStorer,MediumSourcePicker)

// Package rest is a generated GoMock package.
package rest

import (
	context "context"
	store "github.com/ankur22/medium-picker/internal/store"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserStorer is a mock of UserStorer interface
type MockUserStorer struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorerMockRecorder
}

// MockUserStorerMockRecorder is the mock recorder for MockUserStorer
type MockUserStorerMockRecorder struct {
	mock *MockUserStorer
}

// NewMockUserStorer creates a new mock instance
func NewMockUserStorer(ctrl *gomock.Controller) *MockUserStorer {
	mock := &MockUserStorer{ctrl: ctrl}
	mock.recorder = &MockUserStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserStorer) EXPECT() *MockUserStorerMockRecorder {
	return m.recorder
}

// CreateNewUser mocks base method
func (m *MockUserStorer) CreateNewUser(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUser indicates an expected call of CreateNewUser
func (mr *MockUserStorerMockRecorder) CreateNewUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockUserStorer)(nil).CreateNewUser), arg0, arg1)
}

// GetUser mocks base method
func (m *MockUserStorer) GetUser(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUserStorerMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserStorer)(nil).GetUser), arg0, arg1)
}

// IsUser mocks base method
func (m *MockUserStorer) IsUser(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUser", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUser indicates an expected call of IsUser
func (mr *MockUserStorerMockRecorder) IsUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUser", reflect.TypeOf((*MockUserStorer)(nil).IsUser), arg0, arg1)
}

// MockMediumSourceStorer is a mock of MediumSourceStorer interface
type MockMediumSourceStorer struct {
	ctrl     *gomock.Controller
	recorder *MockMediumSourceStorerMockRecorder
}

// MockMediumSourceStorerMockRecorder is the mock recorder for MockMediumSourceStorer
type MockMediumSourceStorerMockRecorder struct {
	mock *MockMediumSourceStorer
}

// NewMockMediumSourceStorer creates a new mock instance
func NewMockMediumSourceStorer(ctrl *gomock.Controller) *MockMediumSourceStorer {
	mock := &MockMediumSourceStorer{ctrl: ctrl}
	mock.recorder = &MockMediumSourceStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMediumSourceStorer) EXPECT() *MockMediumSourceStorerMockRecorder {
	return m.recorder
}

// AddSource mocks base method
func (m *MockMediumSourceStorer) AddSource(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSource", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSource indicates an expected call of AddSource
func (mr *MockMediumSourceStorerMockRecorder) AddSource(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSource", reflect.TypeOf((*MockMediumSourceStorer)(nil).AddSource), arg0, arg1, arg2)
}

// DeleteSource mocks base method
func (m *MockMediumSourceStorer) DeleteSource(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSource", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSource indicates an expected call of DeleteSource
func (mr *MockMediumSourceStorerMockRecorder) DeleteSource(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSource", reflect.TypeOf((*MockMediumSourceStorer)(nil).DeleteSource), arg0, arg1, arg2)
}

// GetSources mocks base method
func (m *MockMediumSourceStorer) GetSources(arg0 context.Context, arg1 string, arg2 int) ([]store.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSources", arg0, arg1, arg2)
	ret0, _ := ret[0].([]store.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSources indicates an expected call of GetSources
func (mr *MockMediumSourceStorerMockRecorder) GetSources(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSources", reflect.TypeOf((*MockMediumSourceStorer)(nil).GetSources), arg0, arg1, arg2)
}

// MockMediumSourcePicker is a mock of MediumSourcePicker interface
type MockMediumSourcePicker struct {
	ctrl     *gomock.Controller
	recorder *MockMediumSourcePickerMockRecorder
}

// MockMediumSourcePickerMockRecorder is the mock recorder for MockMediumSourcePicker
type MockMediumSourcePickerMockRecorder struct {
	mock *MockMediumSourcePicker
}

// NewMockMediumSourcePicker creates a new mock instance
func NewMockMediumSourcePicker(ctrl *gomock.Controller) *MockMediumSourcePicker {
	mock := &MockMediumSourcePicker{ctrl: ctrl}
	mock.recorder = &MockMediumSourcePickerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMediumSourcePicker) EXPECT() *MockMediumSourcePickerMockRecorder {
	return m.recorder
}

// Pick mocks base method
func (m *MockMediumSourcePicker) Pick(arg0 context.Context, arg1 string, arg2 int) ([]store.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pick", arg0, arg1, arg2)
	ret0, _ := ret[0].([]store.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pick indicates an expected call of Pick
func (mr *MockMediumSourcePickerMockRecorder) Pick(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pick", reflect.TypeOf((*MockMediumSourcePicker)(nil).Pick), arg0, arg1, arg2)
}
